"""
Speaker voice recording tool for AgentVox
Records high-quality voice samples for TTS voice cloning
"""

import argparse
import sys
import os
import wave
import tempfile
import speech_recognition as sr
import soundfile as sf
import numpy as np
from pathlib import Path
from typing import Dict, List


# Language-specific prompts for voice recording
RECORDING_PROMPTS = {
    "ko": {
        "title": "ÏùåÏÑ± ÏÉòÌîå ÎÖπÏùå",
        "instructions": "ÏïÑÎûò Î¨∏Ïû•ÏùÑ ÏùΩÏñ¥Ï£ºÏÑ∏Ïöî. ÏûêÏó∞Ïä§ÎüΩÍ≥† ÌèâÏÜå ÎßêÌïòÎäî ÌÜ§ÏúºÎ°ú ÏùΩÏñ¥Ï£ºÏãúÎ©¥ Îê©ÎãàÎã§.",
        "prompts": [
            "ÏïàÎÖïÌïòÏÑ∏Ïöî. Ï†ÄÎäî Ïò§Îäò ÎÇ†Ïî®Í∞Ä Ï†ïÎßê Ï¢ãÎã§Í≥† ÏÉùÍ∞ÅÌï©ÎãàÎã§.",
            "Ïù∏Í≥µÏßÄÎä• Í∏∞Ïà†ÏùÄ Ïö∞Î¶¨Ïùò ÏùºÏÉÅÏÉùÌôúÏùÑ ÎßéÏù¥ Î≥ÄÌôîÏãúÌÇ§Í≥† ÏûàÏäµÎãàÎã§.",
            "Ï¢ãÏùÄ ÌïòÎ£® ÎêòÏÑ∏Ïöî. Îã§ÏùåÏóê Îòê ÎßåÎÇòÏöî.",
            "ÎØ∏ÎØπÎû©ÏùÄ ÏÑúÍ∞ïÎåÄÌïôÍµêÏùò Ïó∞Íµ¨Ïã§ÏûÖÎãàÎã§.",
            "Ï†ÄÎäî ÎãπÏã†Í≥º ÎåÄÌôîÌïòÎäî Í≤ÉÏùÑ Ï¶êÍπÅÎãàÎã§."
        ],
        "ready": "Ï§ÄÎπÑÎêòÎ©¥ EnterÎ•º ÎàÑÎ•¥Í≥† ÎßêÏîÄÌï¥Ï£ºÏÑ∏Ïöî:",
        "recording": "ÎÖπÏùå Ï§ë... (ÎßêÏù¥ ÎÅùÎÇòÎ©¥ ÏûêÎèôÏúºÎ°ú Î©àÏ∂•ÎãàÎã§)",
        "recorded": "ÎÖπÏùå ÏôÑÎ£å!",
        "save_prompt": "Ïù¥ ÎÖπÏùåÏùÑ Ï†ÄÏû•ÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/n): ",
        "retry": "Îã§Ïãú ÎÖπÏùåÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
        "next": "Îã§Ïùå Î¨∏Ïû•ÏúºÎ°ú ÏßÑÌñâ",
        "finished": "Î™®Îì† ÎÖπÏùåÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!",
        "saved_as": "Ï†ÄÏû• ÏúÑÏπò:",
        "quality_check": "ÎÖπÏùå ÌíàÏßà ÌôïÏù∏ Ï§ë...",
        "quality_good": "‚úì ÎÖπÏùå ÌíàÏßàÏù¥ Ï¢ãÏäµÎãàÎã§.",
        "quality_poor": "‚úó ÎÖπÏùå ÌíàÏßàÏù¥ ÎÇÆÏäµÎãàÎã§. Îã§Ïãú ÎÖπÏùåÌï¥Ï£ºÏÑ∏Ïöî.",
        "no_speech": "ÏùåÏÑ±Ïù¥ Í∞êÏßÄÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.",
        "error": "Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§:"
    },
    "en": {
        "title": "Voice Sample Recording",
        "instructions": "Please read the following sentences. Speak naturally in your normal tone.",
        "prompts": [
            "Hello. I think the weather is really nice today.",
            "Artificial intelligence technology is changing our daily lives significantly.",
            "Have a great day. See you next time.",
            "MimicLab is a research laboratory at Sogang University.",
            "I enjoy having conversations with you."
        ],
        "ready": "Press Enter when ready to speak:",
        "recording": "Recording... (will stop automatically when you finish speaking)",
        "recorded": "Recording complete!",
        "save_prompt": "Save this recording? (y/n): ",
        "retry": "Record again?",
        "next": "Proceed to next sentence",
        "finished": "All recordings completed!",
        "saved_as": "Saved to:",
        "quality_check": "Checking recording quality...",
        "quality_good": "‚úì Recording quality is good.",
        "quality_poor": "‚úó Recording quality is poor. Please record again.",
        "no_speech": "No speech detected.",
        "error": "An error occurred:"
    },
    "ja": {
        "title": "Èü≥Â£∞„Çµ„É≥„Éó„É´Èå≤Èü≥",
        "instructions": "‰ª•‰∏ã„ÅÆÊñáÁ´†„ÇíË™≠„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇËá™ÁÑ∂„Å™ÊôÆÊÆµ„ÅÆÂè£Ë™ø„ÅßË™≠„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "prompts": [
            "„Åì„Çì„Å´„Å°„ÅØ„ÄÇ‰ªäÊó•„ÅØÊú¨ÂΩì„Å´„ÅÑ„ÅÑÂ§©Ê∞ó„Å†„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ",
            "‰∫∫Â∑•Áü•ËÉΩÊäÄË°ì„ÅØÁßÅ„Åü„Å°„ÅÆÊó•Â∏∏ÁîüÊ¥ª„ÇíÂ§ß„Åç„ÅèÂ§â„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
            "ËâØ„ÅÑ‰∏ÄÊó•„Çí„ÄÇ„Åæ„Åü‰ºö„ÅÑ„Åæ„Åó„Çá„ÅÜ„ÄÇ",
            "„Éü„Éü„ÉÉ„ÇØ„É©„Éú„ÅØË•øÊ±üÂ§ßÂ≠¶„ÅÆÁ†îÁ©∂ÂÆ§„Åß„Åô„ÄÇ",
            "ÁßÅ„ÅØ„ÅÇ„Å™„Åü„Å®‰ºöË©±„Åô„Çã„Åì„Å®„ÇíÊ•Ω„Åó„Çì„Åß„ÅÑ„Åæ„Åô„ÄÇ"
        ],
        "ready": "Ê∫ñÂÇô„Åå„Åß„Åç„Åü„ÇâEnter„ÇíÊäº„Åó„Å¶Ë©±„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö",
        "recording": "Èå≤Èü≥‰∏≠...ÔºàË©±„ÅóÁµÇ„Çè„Çã„Å®Ëá™ÂãïÁöÑ„Å´ÂÅúÊ≠¢„Åó„Åæ„ÅôÔºâ",
        "recorded": "Èå≤Èü≥ÂÆå‰∫ÜÔºÅ",
        "save_prompt": "„Åì„ÅÆÈå≤Èü≥„Çí‰øùÂ≠ò„Åó„Åæ„Åô„ÅãÔºü (y/n): ",
        "retry": "„ÇÇ„ÅÜ‰∏ÄÂ∫¶Èå≤Èü≥„Åó„Åæ„Åô„ÅãÔºü",
        "next": "Ê¨°„ÅÆÊñáÁ´†„Å∏ÈÄ≤„ÇÄ",
        "finished": "„Åô„Åπ„Å¶„ÅÆÈå≤Èü≥„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ",
        "saved_as": "‰øùÂ≠òÂÖàÔºö",
        "quality_check": "Èå≤Èü≥ÂìÅË≥™„ÇíÁ¢∫Ë™ç‰∏≠...",
        "quality_good": "‚úì Èå≤Èü≥ÂìÅË≥™„ÅØËâØÂ•Ω„Åß„Åô„ÄÇ",
        "quality_poor": "‚úó Èå≤Èü≥ÂìÅË≥™„Åå‰Ωé„ÅÑ„Åß„Åô„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Èå≤Èü≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "no_speech": "Èü≥Â£∞„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ",
        "error": "„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„ÅüÔºö"
    },
    "zh": {
        "title": "ËØ≠Èü≥Ê†∑Êú¨ÂΩïÂà∂",
        "instructions": "ËØ∑ÊúóËØª‰ª•‰∏ãÂè•Â≠ê„ÄÇÁî®ÊÇ®Âπ≥Â∏∏ÁöÑËØ≠Ë∞ÉËá™ÁÑ∂Âú∞ËØ¥ËØù„ÄÇ",
        "prompts": [
            "‰Ω†Â•Ω„ÄÇÊàëËßâÂæó‰ªäÂ§©Â§©Ê∞îÁúüÁöÑÂæàÂ•Ω„ÄÇ",
            "‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÊ≠£Âú®ÊòæËëóÊîπÂèòÊàë‰ª¨ÁöÑÊó•Â∏∏ÁîüÊ¥ª„ÄÇ",
            "Á•ù‰Ω†ÊúâÁæéÂ•ΩÁöÑ‰∏ÄÂ§©„ÄÇ‰∏ãÊ¨°ËßÅ„ÄÇ",
            "MimicLabÊòØË•øÊ±üÂ§ßÂ≠¶ÁöÑÁ†îÁ©∂ÂÆûÈ™åÂÆ§„ÄÇ",
            "ÊàëÂñúÊ¨¢Âíå‰Ω†‰∫§Ë∞à„ÄÇ"
        ],
        "ready": "ÂáÜÂ§áÂ•ΩÂêéÊåâEnterÈîÆÂºÄÂßãËØ¥ËØùÔºö",
        "recording": "ÂΩïÈü≥‰∏≠...ÔºàËØ¥ÂÆåÂêé‰ºöËá™Âä®ÂÅúÊ≠¢Ôºâ",
        "recorded": "ÂΩïÈü≥ÂÆåÊàêÔºÅ",
        "save_prompt": "‰øùÂ≠òÊ≠§ÂΩïÈü≥ÂêóÔºü (y/n): ",
        "retry": "ÈáçÊñ∞ÂΩïÈü≥Ôºü",
        "next": "ËøõÂÖ•‰∏ã‰∏ÄÂè•",
        "finished": "ÊâÄÊúâÂΩïÈü≥Â∑≤ÂÆåÊàêÔºÅ",
        "saved_as": "‰øùÂ≠ò‰ΩçÁΩÆÔºö",
        "quality_check": "Ê≠£Âú®Ê£ÄÊü•ÂΩïÈü≥Ë¥®Èáè...",
        "quality_good": "‚úì ÂΩïÈü≥Ë¥®ÈáèËâØÂ•Ω„ÄÇ",
        "quality_poor": "‚úó ÂΩïÈü≥Ë¥®ÈáèËæÉÂ∑Æ„ÄÇËØ∑ÈáçÊñ∞ÂΩïÈü≥„ÄÇ",
        "no_speech": "Êú™Ê£ÄÊµãÂà∞ËØ≠Èü≥„ÄÇ",
        "error": "ÂèëÁîüÈîôËØØÔºö"
    }
}


class SpeakerRecorder:
    def __init__(self, language: str = "ko", sample_rate: int = 22050):
        self.language = language
        self.sample_rate = sample_rate
        self.prompts = RECORDING_PROMPTS.get(language, RECORDING_PROMPTS["en"])
        
        # Initialize speech recognizer
        self.recognizer = sr.Recognizer()
        self.recognizer.energy_threshold = 1500
        self.recognizer.dynamic_energy_threshold = False
        self.recognizer.pause_threshold = 1.5
        self.microphone = sr.Microphone(sample_rate=sample_rate)
        
        # Adjust for ambient noise
        with self.microphone as source:
            print(f"\n{self.prompts['quality_check']}")
            self.recognizer.adjust_for_ambient_noise(source, duration=1.0)
    
    def check_audio_quality(self, audio_data: np.ndarray) -> bool:
        """Check if audio quality is sufficient for voice cloning"""
        # Check volume level
        max_amplitude = np.max(np.abs(audio_data))
        if max_amplitude < 0.01:  # Too quiet
            return False
        
        # Check for clipping
        if np.sum(np.abs(audio_data) > 0.95) > len(audio_data) * 0.01:  # More than 1% clipping
            return False
        
        # Check signal-to-noise ratio (simple version)
        signal_power = np.mean(audio_data ** 2)
        if signal_power < 0.001:  # Too weak signal
            return False
            
        return True
    
    def record_single_prompt(self, prompt: str) -> tuple[np.ndarray, bool]:
        """Record a single prompt and return audio data"""
        print(f"\n{'='*60}")
        print(f"üìù {prompt}")
        print(f"{'='*60}")
        
        input(f"\n{self.prompts['ready']} ")
        
        with self.microphone as source:
            print(f"{self.prompts['recording']}")
            
            try:
                # Record with timeout
                audio = self.recognizer.listen(
                    source,
                    timeout=30,
                    phrase_time_limit=20  # Maximum 20 seconds per recording
                )
                
                # Convert to numpy array
                wav_data = audio.get_wav_data()
                audio_array = np.frombuffer(wav_data, dtype=np.int16).astype(np.float32) / 32768.0
                
                print(f"{self.prompts['recorded']}")
                
                # Check quality
                print(f"{self.prompts['quality_check']}")
                if self.check_audio_quality(audio_array):
                    print(f"{self.prompts['quality_good']}")
                    return audio_array, True
                else:
                    print(f"{self.prompts['quality_poor']}")
                    return audio_array, False
                    
            except sr.WaitTimeoutError:
                print(f"{self.prompts['no_speech']}")
                return None, False
            except Exception as e:
                print(f"{self.prompts['error']} {e}")
                return None, False
    
    def record_all_prompts(self, output_path: str):
        """Record all prompts and save to a single file"""
        print(f"\n{self.prompts['title']}")
        print(f"{self.prompts['instructions']}\n")
        
        all_audio = []
        
        for i, prompt in enumerate(self.prompts['prompts']):
            while True:
                audio_data, quality_ok = self.record_single_prompt(prompt)
                
                if audio_data is not None:
                    # Play back the recording (optional)
                    response = input(f"\n{self.prompts['save_prompt']}").lower()
                    
                    if response == 'y':
                        all_audio.append(audio_data)
                        if i < len(self.prompts['prompts']) - 1:
                            print(f"‚úì {self.prompts['next']}")
                        break
                    else:
                        retry = input(f"{self.prompts['retry']} (y/n): ").lower()
                        if retry != 'y':
                            break
                else:
                    retry = input(f"{self.prompts['retry']} (y/n): ").lower()
                    if retry != 'y':
                        break
        
        if all_audio:
            # Combine all audio with short pauses
            pause_samples = int(0.5 * self.sample_rate)  # 0.5 second pause
            pause = np.zeros(pause_samples)
            
            combined_audio = []
            for i, audio in enumerate(all_audio):
                combined_audio.extend(audio)
                if i < len(all_audio) - 1:
                    combined_audio.extend(pause)
            
            combined_audio = np.array(combined_audio)
            
            # Save as WAV file
            sf.write(output_path, combined_audio, self.sample_rate)
            print(f"\n{self.prompts['finished']}")
            print(f"{self.prompts['saved_as']} {output_path}")
            
            # Print file info
            duration = len(combined_audio) / self.sample_rate
            print(f"Duration: {duration:.1f} seconds")
            print(f"Sample rate: {self.sample_rate} Hz")
            
            return True
        else:
            print(f"\n{self.prompts['error']} No audio recorded.")
            return False


def main():
    parser = argparse.ArgumentParser(
        description="Record speaker voice samples for AgentVox TTS voice cloning"
    )
    parser.add_argument(
        "--language", "-l",
        type=str,
        default="ko",
        choices=["ko", "en", "ja", "zh"],
        help="Language for recording prompts (default: ko)"
    )
    parser.add_argument(
        "--output", "-o",
        type=str,
        default=None,
        help="Output file path (default: speaker_[language].wav)"
    )
    parser.add_argument(
        "--sample-rate",
        type=int,
        default=22050,
        help="Sample rate for recording (default: 22050 Hz, recommended for TTS)"
    )
    
    args = parser.parse_args()
    
    # Set default output path if not specified
    if args.output is None:
        args.output = f"speaker_{args.language}.wav"
    
    # Ensure output directory exists
    output_path = Path(args.output)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Create recorder and start recording
    recorder = SpeakerRecorder(
        language=args.language,
        sample_rate=args.sample_rate
    )
    
    try:
        success = recorder.record_all_prompts(str(output_path))
        if success:
            print(f"\n‚úÖ Voice sample ready for use with AgentVox!")
            print(f"Usage: agentvox --tts-engine coqui --speaker-wav {output_path}")
            sys.exit(0)
        else:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\nRecording cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\nError: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()